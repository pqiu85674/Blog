[{"title":"NodeServer","url":"/Blog/2024/06/04/NodeServer/","content":"\n# 以Node.js 實作一個 Server\n\n```js\n// node.js 內建 http 相關 module\nconst http = require(\"http\");\nconst headers = {\n    \"Access-Control-Allow-Headers\":\n      \"Content-Type, Authorization, Content-Length, X-Requested-With\",\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Methods\": \"PATCH, POST, GET,OPTIONS,DELETE\",\n    \"Content-Type\": \"application/json\",\n  };\n  \n// 兩個參數分別是 request 和 response，這裡使用命名慣例寫法\nfunction requestListener(req, res) {\n  if (req.url === \"/\") {\n    res.writeHead(200,headers);\n    res.write(\"This is index!\"); // 指定 respone 回傳內容\n    res.end(); // 結束這個 response\n  } else if (req.url === \"/seach\") {\n    res.writeHead(200,headers);\n    res.write(\"This is seach Page!\"); // 指定 respone 回傳內容\n    res.end(); // 結束這個 response\n  }\n}\nconst server = http.createServer(requestListener);\nconst port = process.env.PORT || 3000;\n\nserver.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n\n// 處理應用程序退出信號\nconst shutdown = () => {\n  server.close(() => {\n    console.log(\"Process terminated\");\n    process.exit(0);\n  });\n};\n\nprocess.on(\"SIGTERM\", shutdown);\nprocess.on(\"SIGINT\", shutdown);\n\nserver.on(\"error\", (e) => {\n  if (e.code === \"EADDRINUSE\") {\n    console.error(`Port ${port} is already in use`);\n  } else {\n    console.error(`Server error: ${e}`);\n  }\n});\n```","tags":["node.js","Express"],"categories":["node.js"]},{"title":"認識 Node.js、NPM","url":"/Blog/2024/06/04/Node/","content":"\n# Node.js\n\nNode.js 是一個開源、跨平台的 JavaScript 執行時環境，它允許開發者在伺服器端運行 JavaScript。Node.js 採用了 Google 的 V8 JavaScript 引擎（與 Chrome 瀏覽器使用的相同），提供了高效、輕量的事件驅動架構，使其特別適用於構建高性能和可擴展的網絡應用。\n\n## 安裝\n\n- 前往官方網站下載 Node.js 安裝檔\n  官方連結：[node.js](https://nodejs.org/en)\n\n- NVM（Node Version Manager）\n  NVM 是一个 Node.js 版本管理工具，可以让你轻松地管理多个 Node.js 版本。你可以使用以下命令来安装 NVM\n\n```bash\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\n```\n\n安装完成后，你可以使用以下命令来安装 Node.js：\n\n```bash\nnvm install node\n```\n\n完成安裝後可以開啟終端機，鍵入指令 `node --version (node -v)` 來檢查版本資訊。\n\n## 簡易指令\n\n- 進入 node.js 執行環境\n\n```bash\nnode\n```\n\n- 進入環境後可以輸入 JavaScript 程式碼，就像瀏覽器的檢查工具一樣\n\n```bash\nlet a = 1\n#undefined\na\n#1\na++\n#1\na\n#2\nconsole.log('Hello, world!')\n#Hello, world!\n```\n\n- 查看可用的指令\n\n```bash\n.help\n```\n\n- 離開 node.js 環境（方法 1）\n\n```bash\n.exit\n```\n\n- 離開 node.js 環境（方法 2）\n\n```bash\n# 按兩次 Ctrl+C\nCtrl+C\nCtrl+C\n```\n\n## 執行 JS 檔案\n\n方法１：先用指令移動到 JS 檔案存放的目錄位置，再輸入指令\n\n```bash\ncd ./'專案資料夾'\nnode 檔名.js\n```\n\n方法２：直接輸入完整路徑和檔名\n\n```bash\nnode 完整路徑/檔名.js\n```\n\n# NPM\n\nNPM 是 Node Package Manager 的縮寫，是 Node.js 預設的 node 套件管理平台，npm 本機端的相關工具在安裝 node.js 時也會一起安裝，完成 Node.js 的安裝後就可以在終端機輸入指令 npm -v 來檢查版本資訊。\n\n## npm init\n\n```bash\nmkdir '資料夾名稱' #建立資料夾\ncd ./資料夾名稱 #切換路徑\nnpm init #建立package.json\n\n    package name: (test) #專案名稱\n    version: (1.0.0) #版本\n    description: #描述\n    entry point: (index.js) #進入點\n    test command: #測試指令\n    git repository: #Git 儲存庫位置\n    keywords: #關鍵字\n    author: #作者\n    license: (ISC) #開源授權方式\n\ncode . #使用VS code開啟\n```\n\n輸入完`npm init`會出現以上內容，可以按照你的情況輸入，也可按下 Enter 跳過，並且最後輸入 Y 就可以在 VS code 看到 package.json 檔案\n\n**假如你想跳過環境設定，使用預設值建立**\n\n```bash\nnpm init -y\n```\n\n**package.json 內容如下**\n\n```bash\n{\n  \"name\": \"test\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"description\": \"\"\n}\n```\n\n## 關於套件指令\n\n1. 安裝套件：npm install 套件名稱 或 npm i 套件名稱\n```bash\nnpm install express #安裝express\n\nnpm install uuid #安裝uuid\n```\n\n2. –save 安裝於 dependencies (已發布環境)\nnpm 安裝指令中有時會看到後面有加上 –save，如下 :\n```bash\nnpm install 套件名稱\n\nnpm install 套件名稱 --savs\n```\n`上面兩段安裝指令，其實可以說是相同的，透過 package.json 檔案我們可以看到，上面兩段指令安裝的套件，都會列於， dependencies 中。`\n\n3. –save-dev 安裝於 devDependencies (開發中環境)\nnpm 安裝指令中，如果你希望只安裝在開發環境中，可以在後面加上 –save-dev，如下 :\n```bash\nnpm install 套件名稱 --savs-dev\n```\n`加上 –save-dev 後，透過 package.json 檔案你會發現，指定安裝的套件列於 devDependencies 中。`\n\n4. 查看套件版本：npm -v\n查看已安裝的套件版本，使用 -v，如下 :\n```bash\nnpm 套件名稱 -v\n```\n你也可以使用 -v 來查看 NPM 本身的版本，如下:\n```bash\nnpm -v\n```\n\n5. 更新套件: npm update\n更新指令使用 update，如下\n```bash\nnpm update 套件名稱\n```\n\n6. 移除套件：npm uninstall 套件名稱\n```bash\nnpm uninstall '套件名稱'\n```\n\n7. 檢視所有安裝的套件：`npm ls` or `npm list`\n```bash\nnpm ls\n\n路徑/資料夾名稱\n├── express@4.16.4\n└── uuid@9.0.1\n```\n可以看到你所安裝的套件\n","tags":["node.js"],"categories":["node.js"]},{"title":"Hexo","url":"/Blog/2024/05/08/Hexo/","content":"\n# 安裝需求\n\n在開始安裝 Hexo 之前，必須先在電腦安裝下列工具：\n\n- Node.js\n\n- Git\n\n確認安裝版本\n\n- node.js\n```bash\nnode -v\n```\n\n- npm\n```bash\nnpm -v\n```\n\n# Hexo 環境建置\n\n- 安裝 Hexo\n```bash\nnpm install -g hexo-cli\n```\n\n- 確認安裝成功\n```bash\nhexo -v\n```\n\n- 初始化 Hexo\n```bash\nhexo init <資料夾名稱>\n```\n\n# 目錄結構\n\n- node_modules\n- scaffolds\n- source\n  - \\_posts\n- themes\n- \\_config.yml\n- .gitignore\n- package.json\n- package-lock.json\n\n## theme\n\n**加入 landscape 主題**\n\n```bash\ngit clone --depth 1 https://github.com/hexojs/hexo-theme-landscape themes/landscape\n```\n\n可參考https://github.com/hexojs/hexo-theme-landscape\n\n**加入 next 主題**\n\n```bash\ngit clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n\n可參考https://github.com/theme-next/hexo-theme-next\n\n其他主題可參考https://hexo.io/themes/\n\n## \\_config.yml 內容介紹\n\n- title: Hexo # 部落格名稱\n- subtitle: '' # 部落格小標題\n- description: '' # 部落格描述\n- keywords: # 部落格關鍵字\n- author: John Doe # 部落格作者\n- language: en # 部落格語系(可以調成 zh-TW)\n- timezone: '' # 標準時間\n\n# Hexo 指令\n\n常用的 Hexo 指令\n\n- 新增文章\n```bash\nhexo new '文章名稱'\n```\n\n- 產生靜態檔案\n```bash\nhexo generate\n```\n\n- 開啟模擬伺服器\n```bash\nhexo server\n```\n\n- 清除暫存檔案\n```bash\nhexo clean\n```\n\n- 產生靜態檔案並且部署到 GitHub 上\n```bash\nhexo deploy\n```\n\n## 一鍵佈署到 Github 上\n\n**在 Github 上建立一個專案並且記錄網址**\n\n- 安裝 hexo-deployer-git.\n```bash\nnpm install hexo-deployer-git --save\n```\n\n- 更改 \\_config.yml 的現有資料，並新增以下組態:\n```bash\nurl:'https://username.github.io/project'(網址要改)\n.\n.\n.\ndeploy:\n  type: git\n  repo: https://github.com/<username>/<project>(網址要改)\n  # example, https://github.com/hexojs/hexojs.github.io\n  branch: gh-pages\n```\n\n- 執行以下指令\n```bash\nhexo clean\nhexo deploy\n```\n參考連結:https://hexo.io/zh-tw/docs/github-pages\n","tags":["Hexo","Github"],"categories":["Hexo一鍵佈署到Github"]},{"title":"Hello World","url":"/Blog/1970/01/01/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]